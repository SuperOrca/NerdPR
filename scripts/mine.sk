function getPrice(b: block) :: number:
	return 500 if {_b} is white terracotta
	return 1000 if {_b} is yellow terracotta
	return 1500 if {_b} is blue terracotta
	return 0

function blockValidator(b: block) :: boolean:
	if {_b} is not air:
		if "%region at {_b}%" contains "mine":
			return true
	return false

function simMine(p: player, t: number):
	set {_u} to {_p}'s uuid
	add {_t} to {balance::%{_u}%}
	add 1 to {xp::%{_u}%}
	add 1 to {mined::%{_u}%}

function mineActionBar(p: player):
	set {_u} to {_p}'s uuid
	set {_mined} to formatNumber({mined::%{_u}%} ? 0)
	set {_xp} to round ((({xp::%{_u}%} ? 0)/({xpn::%{_u}%} ? 100)) * 100)
	send action bar "&7Progress: <##81aef7>%{_xp}%%% &8| &7Mined: <##81aef7>%{_mined}%" to {_p}

function updateLevel(p: player):
	set {_u} to {_p}'s uuid
	while {xp::%{_u}%} >= ({xpn::%{_u}%} ? 100):
		add 1 to {level::%{_u}%}
		remove ({xpn::%{_u}%} ? 100) from {xp::%{_u}%}
		set {xpn::%{_u}%} to round ({xpn::%{_u}%} ? 100)^1.005
		send "<##4b8bf2>&lLEVEL &7Leveled up to level <##81aef7>%{level::%{_u}%}%&7." to {_p}
		wait 1 tick
	while {level::%{_u}%} >= (({prestige::%{_u}%} ? 0) * 5 + 10):
		remove (({prestige::%{_u}%} ? 0) * 5 + 10) from {level::%{_u}%}
		delete {xpn::%{_u}%}
		add 1 to {prestige::%{_u}%}
		broadcast "<##4b8bf2>&lPRESTIGE <##81aef7>%{_p}%&7 prestiged to <##81aef7>%{prestige::%{_u}%}%&7."
		wait 1 tick

on break:
	player's tool is pickaxe
	clear drops

	set metadata "nuker" of player to metadata "nuker" of player + 1
	if metadata "nuker_yes" of player is not set:
		set metadata "nuker_yes" of player to true
		wait 5 seconds
		if metadata "nuker" of player > 150:
			send "&7&lANTICHEAT &8| <##81aef7>%player%&7 might be using <##81aef7>Nuker&7. (Blocks: %round((metadata "nuker" of player)/5)%)" to all players where [input has permission "staff"]
		if metadata "nuker" of player > 350:
			make console execute command "ban %player% Nuker -s"
		delete metadata "nuker" of player
		delete metadata "nuker_yes" of player

	add 1 to {mined::%player's uuid%}
	set {_price} to getPrice(event-block)
	set {_fort} to random integer between 1 and (getTag(player's tool, "fortune") + 1)
	set {_total} to {_price} * {_fort}
	set {_total} to {_total} * getMulti(player)
	add {_total} to {balance::%player's uuid%}
	add 1 to {xp::%player's uuid%}

	set {_loc} to event-block's location

	if (random integer between 1 and 3000) <= getTag(player's tool, "jackhammer"):
		set {_loc1} to {_loc} ~ vector(-2, 0, -2)
		set {_loc2} to {_loc} ~ vector(2, 0, 2)
		loop all blocks within {_loc1} and {_loc2}:
			if blockValidator(loop-block) is true:
				simMine(player, {_total})
				set loop-block to air

	if (random integer between 1 and 7250) <= getTag(player's tool, "explosive"):
		loop all blocks in radius 3 around event-block:
			if blockValidator(loop-block) is true:
				simMine(player, {_total})
				set loop-block to air

	if (random integer between 1 and 25000000) <= getTag(player's tool, "chunk"):
		loop all blocks within chunk at event-block:
			if blockValidator(loop-block) is true:
				simMine(player, {_total})
				set loop-block to air

	if (random integer between 1 and 100000000) <= getTag(player's tool, "tsunami"):
		loop all blocks in radius 40 around event-block:
			if blockValidator(loop-block) is true:
				simMine(player, {_total})
				set loop-block to air

	mineActionBar(player)
	updateLevel(player)
	updateScoreboard(player)
