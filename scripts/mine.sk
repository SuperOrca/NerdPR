options:
	bot: NerdPR

	anticheat-channel: 835180339492028417

function getPrice(b: block) :: number:
	return 500 if {_b} is white terracotta
	return 1000 if {_b} is yellow terracotta
	return 1500 if {_b} is blue terracotta
	return 2000 if {_b} is green terracotta
	return 2500 if {_b} is red terracotta
	return 0

command /nomine:
	permission: *
	permission message: &cNo Permission.
	trigger:
		if {nomine} is true:
			delete {nomine}
			alert("Mining enabled.")
		else:
			set {nomine} to true
			alert("Mining disabled.")

function blockValidator(b: block) :: boolean:
	if {_b} is not air:
		if "%region at {_b}%" contains "mine":
			return true
	return false

function simMine(p: player, t: number, x: number, b: number = 1):
	set {_u} to {_p}'s uuid
	add {_t} * {_b} to {balance::%{_u}%}
	add {_x} * {_b} to {xp::%{_u}%}
	add 1 * {_b} to {mined::%{_u}%}
	set {_xp} to getTag(({_p}'s tool), "xp") + 1 * {_b}
	add "{xp:%{_xp}%}" to nbt of {_p}'s tool
	set {_xpn} to tag "xpn" of nbt of {_p}'s tool
	set {_level} to tag "level" of nbt of {_p}'s tool
	set {_points} to tag "points" of nbt of {_p}'s tool
	if {_xp} >= {_xpn}:
		add "{level:%{_level} + 1%,xpn:%{_xpn}^1.004%,xp:%{_xpn} - {_xp}%,points:%{_points} + 1%}" to nbt of {_p}'s tool
		send "&8| &7Your pickaxe leveled up to level <##f78181>%{_level} + 1%&7!" to {_p}
	set {_p}'s tool to updatePickaxeLevel({_p}'s tool)


function mineActionBar(p: player):
	set {_u} to {_p}'s uuid
	set {_mined} to formatNumber({mined::%{_u}%} ? 0)
	set {_xp} to round ((({xp::%{_u}%} ? 0)/({xpn::%{_u}%} ? 100)) * 100)
	send action bar "&7Progress: <##f78181>%{_xp}%%% &8| &7Mined: <##f78181>%{_mined}%" to {_p}

function updateLevel(p: player):
	set {_u} to {_p}'s uuid
	while {xp::%{_u}%} >= ({xpn::%{_u}%} ? 100):
		add 1 to {level::%{_u}%}
		remove ({xpn::%{_u}%} ? 100) from {xp::%{_u}%}
		set {xpn::%{_u}%} to round ({xpn::%{_u}%} ? 100)^1.004
		send "<##f2b84b>&lLEVEL &8| &7Leveled up to level <##f7b481>%{level::%{_u}%}%&7." to {_p}
		wait 1 tick
	while {level::%{_u}%} >= (({prestige::%{_u}%} ? 0) * 5 + 10):
		remove (({prestige::%{_u}%} ? 0) * 5 + 10) from {level::%{_u}%}
		delete {xpn::%{_u}%}
		add 1 to {prestige::%{_u}%}
		broadcast "<##f2b84b>&lPRESTIGE &8| <##f7b481>%{_p}%&7 prestiged to <##f7b481>%{prestige::%{_u}%}%&7."
		wait 1 tick

on break:
	player's tool is pickaxe
	clear drops

	if {nomine} is true:
		cancel event
		stop

	set metadata "nuker" of player to metadata "nuker" of player + 1
	if metadata "nuker_yes" of player is not set:
		set metadata "nuker_yes" of player to true
		wait 5 seconds
		if metadata "nuker" of player > 150:
			send "<##f24b4b>&lANTICHEAT &8| <##f78181>%player%&7 might be using <##f78181>Nuker&7. (Ping: %player's ping%&7) (BPS: %((metadata ""nuker"" of player))/5%&7)" to all players where [input has permission "staff.anticheat"]
			send "`%player%` might be using **Nuker**. (Ping:%player's ping%) (BPS: %((metadata ""nuker"" of player))/5%)" to channel with id "{@anticheat-channel}" with {@bot}
		if metadata "nuker" of player > 350:
			make console execute command "ban %player% Nuker"
		delete metadata "nuker" of player
		delete metadata "nuker_yes" of player

	set {_moneymult} to (tag "moneymult" of nbt of player's offhand tool) ? 1
	set {_xpmult} to (tag "xpmult" of nbt of player's offhand tool) ? 1

	set {_price} to getPrice(event-block)
	set {_fort} to random integer between 1 and (getTag(player's tool, "fortune") + 1)
	set {_total} to {_price} * {_fort}
	set {_total} to {_total} * getMulti(player) * {_moneymult}

	set {_xp} to 1 * {_xpmult}

	simMine(player, {_total}, {_xp})

	set {_loc} to event-block's location

	if (random integer between 1 and (enchantChance("jackhammer"))) <= getTag(player's tool, "jackhammer"):
		set {_loc1} to {_loc} ~ vector(-2, 0, -2)
		set {_loc2} to {_loc} ~ vector(2, 0, 2)
		set {_b::*} to all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true]
		set all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("slice"))) <= getTag(player's tool, "slice"):
		set {_loc1} to {_loc} ~ vector(0, -2, -2)
		set {_loc2} to {_loc} ~ vector(0, 2, 2)
		set {_b::*} to all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true]
		set all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("explosive"))) <= getTag(player's tool, "explosive"):
		set {_b::*} to all blocks in radius 3 around event-block where [blockValidator(input) is true]
		set all blocks in radius 3 around event-block where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("layer"))) <= getTag(player's tool, "layer"):
		set {_loc1} to {_loc} ~ vector(-10, 0, -10)
		set {_loc2} to {_loc} ~ vector(10, 0, 10)
		set {_b::*} to all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true]
		set all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("laser"))) <= getTag(player's tool, "laser"):
		set {_loc1} to {_loc} ~ vector(20, 0, 0)
		set {_loc2} to {_loc} ~ vector(-20, 0, 0)
		set {_loc3} to {_loc} ~ vector(0, 0, 20)
		set {_loc4} to {_loc} ~ vector(0, 0, -20)
		set {_b::*} to all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true]
		set all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))
		set {_b::*} to all blocks within {_loc3} and {_loc4} where [blockValidator(input) is true]
		set all blocks within {_loc3} and {_loc4} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("cube"))) <= getTag(player's tool, "cube"):
		set {_loc1} to {_loc} ~ vector(1, 1, 1)
		set {_loc2} to {_loc} ~ vector(-1, -1, -1)
		set {_b::*} to all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true]
		set all blocks within {_loc1} and {_loc2} where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("xpfinder"))) <= getTag(player's tool, "xpfinder"):
		add {xpn::%player's uuid%} * 1.5 to {xp::%player's uuid%}
		send "<##f24b4b>&lENCHANT &8| &7Your <##f78181>xpfinder&7 has found <##f78181>%insertComma(round ({xpn::%player's uuid%} * 1.5))%<##f78181>XP&7."

	if (random integer between 1 and (enchantChance("chunk"))) <= getTag(player's tool, "chunk"):
		set {_b::*} to all blocks within chunk at event-block where [blockValidator(input) is true]
		set all blocks within chunk at event-block where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	if (random integer between 1 and (enchantChance("tsunami"))) <= getTag(player's tool, "tsunami"):
		set {_b::*} to all blocks in radius 40 around event-block where [blockValidator(input) is true]
		set all blocks in radius 40 around event-block where [blockValidator(input) is true] to air
		simMine(player, {_total}, {_xp}, (size of {_b::*}))

	mineActionBar(player)
	updateLevel(player)
	updateScoreboard(player)
